import{_ as s,c as i,o as a,aj as t}from"./chunks/framework.CFy2Vn3M.js";const u=JSON.parse('{"title":"Performance Tips","description":"","frontmatter":{},"headers":[],"relativePath":"guide/performance.md","filePath":"guide/performance.md"}'),e={name:"guide/performance.md"},n=t(`<h1 id="performance-tips" tabindex="-1">Performance Tips <a class="header-anchor" href="#performance-tips" aria-label="Permalink to &quot;Performance Tips&quot;">​</a></h1><p>Atomix is designed to be lightweight and performant by default — but you can get even more out of it with the right patterns.</p><p>This guide covers how to avoid unnecessary work and ensure fast reactivity at scale.</p><hr><h2 id="🎯-use-selectors-to-limit-re-renders" tabindex="-1">🎯 Use Selectors to Limit Re-Renders <a class="header-anchor" href="#🎯-use-selectors-to-limit-re-renders" aria-label="Permalink to &quot;🎯 Use Selectors to Limit Re-Renders&quot;">​</a></h2><p>Instead of subscribing to the entire atom:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ Subscribes to whole object</span></span></code></pre></div><p>Select only what you need:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅</span></span></code></pre></div><p>This reduces unnecessary re-renders and improves component isolation.</p><h2 id="🧠-avoid-storing-derived-state" tabindex="-1">🧠 Avoid Storing Derived State <a class="header-anchor" href="#🧠-avoid-storing-derived-state" aria-label="Permalink to &quot;🧠 Avoid Storing Derived State&quot;">​</a></h2><p>Don’t do this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, doubled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌</span></span></code></pre></div><p>Do this instead:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> doubled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅</span></span></code></pre></div><p>Derived state should be computed, not stored.</p><h2 id="💧-keep-atom-state-shallow" tabindex="-1">💧 Keep Atom State Shallow <a class="header-anchor" href="#💧-keep-atom-state-shallow" aria-label="Permalink to &quot;💧 Keep Atom State Shallow&quot;">​</a></h2><p>Avoid deeply nested state objects, since changes to deep values are harder to track and optimize.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instead of this:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ user: { profile: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Naol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } } }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Do this:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ userName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Naol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅</span></span></code></pre></div><h2 id="🚀-batch-updates-wip" tabindex="-1">🚀 Batch Updates (WIP) <a class="header-anchor" href="#🚀-batch-updates-wip" aria-label="Permalink to &quot;🚀 Batch Updates (WIP)&quot;">​</a></h2><p>In future versions, Atomix may support batched updates to reduce render cycles. For now, just group setState calls carefully.</p><h2 id="📚-summary" tabindex="-1">📚 Summary <a class="header-anchor" href="#📚-summary" aria-label="Permalink to &quot;📚 Summary&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Tip</th><th>Benefit</th></tr></thead><tbody><tr><td>Use selectors</td><td>Reduce unnecessary renders</td></tr><tr><td>Avoid derived in state</td><td>Keep logic declarative</td></tr><tr><td>Split state by concern</td><td>Easier to debug and test</td></tr></tbody></table>`,23),h=[n];function l(p,r,d,o,k,c){return a(),i("div",null,h)}const y=s(e,[["render",l]]);export{u as __pageData,y as default};
