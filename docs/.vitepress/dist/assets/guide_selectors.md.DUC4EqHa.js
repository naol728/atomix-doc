import{_ as s,c as i,o as a,aj as t}from"./chunks/framework.CFy2Vn3M.js";const u=JSON.parse('{"title":"Selectors & Subscriptions","description":"","frontmatter":{},"headers":[],"relativePath":"guide/selectors.md","filePath":"guide/selectors.md"}'),e={name:"guide/selectors.md"},n=t(`<h1 id="selectors-subscriptions" tabindex="-1">Selectors &amp; Subscriptions <a class="header-anchor" href="#selectors-subscriptions" aria-label="Permalink to &quot;Selectors &amp; Subscriptions&quot;">â€‹</a></h1><p>Atomix encourages precise and efficient reactivity through <strong>selectors</strong> â€” functions that extract a specific slice of your atom&#39;s state. This allows you to subscribe only to the data you care about.</p><hr><h2 id="ðŸŽ¯-what-is-a-selector" tabindex="-1">ðŸŽ¯ What is a Selector? <a class="header-anchor" href="#ðŸŽ¯-what-is-a-selector" aria-label="Permalink to &quot;ðŸŽ¯ What is a Selector?&quot;">â€‹</a></h2><p>A selector is simply a function:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.count;</span></span></code></pre></div><p>It receives the full state and returns the part you&#39;re interested in. Atomix uses this to determine when to trigger listeners.</p><h2 id="ðŸ“¡-subscribing-with-a-selector" tabindex="-1">ðŸ“¡ Subscribing with a Selector <a class="header-anchor" href="#ðŸ“¡-subscribing-with-a-selector" aria-label="Permalink to &quot;ðŸ“¡ Subscribing with a Selector&quot;">â€‹</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unsubscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counterAtom.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.count,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count changed:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>âœ… This only triggers when count changes â€” not when unrelated parts of the atom state do.</p><h2 id="ðŸ§ -behind-the-scenes" tabindex="-1">ðŸ§  Behind the Scenes <a class="header-anchor" href="#ðŸ§ -behind-the-scenes" aria-label="Permalink to &quot;ðŸ§  Behind the Scenes&quot;">â€‹</a></h2><p>Under the hood, Atomix shallow-compares the previous and next result of the selector. If theyâ€™re different, the listener runs.</p><p>This minimizes unnecessary re-renders or computations.</p><h2 id="ðŸš€-react-selector" tabindex="-1">ðŸš€ React + Selector <a class="header-anchor" href="#ðŸš€-react-selector" aria-label="Permalink to &quot;ðŸš€ React + Selector&quot;">â€‹</a></h2><p>In React, you can use selectors directly with useAtom:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.count)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>The component will only re-render when state.count changes â€” not for other keys like state.loading or state.user.</p><h2 id="ðŸ§¹-unsubscribing" tabindex="-1">ðŸ§¹ Unsubscribing <a class="header-anchor" href="#ðŸ§¹-unsubscribing" aria-label="Permalink to &quot;ðŸ§¹ Unsubscribing&quot;">â€‹</a></h2><p>If you&#39;re using plain JavaScript (outside React), always call unsubscribe() when done:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atom.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sel, fn);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,20),h=[n];function l(p,r,o,k,c,d){return a(),i("div",null,h)}const E=s(e,[["render",l]]);export{u as __pageData,E as default};
